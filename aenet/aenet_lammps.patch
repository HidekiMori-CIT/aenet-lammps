diff -r -u aenet/src/Makefile.inc aenet_extend/src/Makefile.inc
--- aenet/src/Makefile.inc	2022-01-26 20:23:30.992784270 +0900
+++ aenet_extend/src/Makefile.inc	2022-01-26 20:00:16.038395132 +0900
@@ -64,7 +64,7 @@
 generate : $(TARGET1)
 train    : $(TARGET2)
 predict  : $(TARGET3)
-lib      : libaenet.a libaenet.so
+lib      : ../../libaenet.a libaenet.so
 
 %.o : %.f90
 	$(FC) $(FCFLAGS) $< -o $*.o
@@ -90,15 +90,19 @@
 $(BIN)%.x : %.F90 $(OBJECTS) Makefile.inc
 	$(LD) $(LDFLAGS) -o $@-$(version)-$(SUFFIX) $< $(OBJECTS) $(LIB) $(NUMLIB)
 
-libaenet.a : $(OBJECTS) Makefile.inc
+../../libaenet.a : $(OBJECTS) Makefile.inc
 	$(AR) $(ARFLAGS) $@ $(OBJECTS)
+	@echo "aenet_SYSINC  =" > ../../Makefile.lammps
+	@echo "aenet_SYSLIB  = $(MY_SYSLIB)" >>../../Makefile.lammps
+	@echo "aenet_SYSPATH =" >> ../../Makefile.lammps
 
 libaenet.so : $(PICOBJECTS) Makefile.inc
 	$(LIBLD) $(LIBFLAGS) $(PICOBJECTS) $(LIBLIB) -o $@
 
 veryclean: clean
 	for f in $(TARGETS); do rm -f $$f-*; done
-	if [ -e libaenet.a ]; then rm -f libaenet.a; fi
+	if [ -e ../../libaenet.a ]; then rm -f ../../libaenet.a; fi
+	if [ -e ../../Makefile.lammps ]; then rm -f ../../Makefile.lammps; fi
 	if [ -e libaenet.so ]; then rm -f libaenet.so; fi
 	if [ -e TAGS ]; then rm -f TAGS; fi
 	for f in $(TESTS); do rm -f $$f-*; done
diff -r -u aenet/src/ext/feedforward.f90 aenet_extend/src/ext/feedforward.f90
--- aenet/src/ext/feedforward.f90	2022-01-26 20:23:30.992784270 +0900
+++ aenet_extend/src/ext/feedforward.f90	2022-01-26 20:00:16.039395136 +0900
@@ -436,6 +436,10 @@
           fname = 'scaled hyperbolic tangent (mtanh)'
        case(4)
           fname = 'scaled hyperbolic tangent + linear twisting (twist)'
+       case(5)
+          fname = 'sigmoid-weighted linear units (swish)'
+       case(6)
+          fname = 'A Self Regularized Non-Monotonic Neural Activation Function (Mish)'
        end select
        write(*,'(5x,I3," : ",I5,2x,A)') ilayer, net%nnodes(ilayer), trim(fname)
     end do
@@ -593,7 +597,7 @@
     integer,                                  intent(in)    :: ny
     double precision, dimension(net%nvalues), intent(out)   :: values
     double precision, dimension(net%nvalues), intent(out)   :: derivs
-    double precision, dimension(nx),          intent(out)   :: y
+    double precision, dimension(ny),          intent(out)   :: y
 
     integer, dimension(2) :: Wshape
     integer               :: iw1, iw2
@@ -903,6 +907,10 @@
        net%f_a(ilayer) = 3
     case('twist','w')
        net%f_a(ilayer) = 4
+    case('swish','i')
+       net%f_a(ilayer) = 5
+    case('mish','h')
+       net%f_a(ilayer) = 6
     case default
        write(0,*) "Error: invalid function type in `change_activation': ", &
                   trim(ftype)
@@ -942,6 +950,11 @@
     double precision, parameter :: a = 1.7159d0
     double precision, parameter :: b = 0.666666666666667d0
     double precision, parameter :: c = 0.1d0
+    double precision :: sigmoid_bx
+    double precision, parameter :: beta = 1.0d0
+    double precision :: softplus_x
+    double precision :: delta,omega
+    
 
     select case(t)
     case(0)
@@ -961,6 +974,16 @@
        tanhbx = tanh(b*x)
        y  = a*tanhbx + c*x
        dy = a*(1.0d0 - tanhbx*tanhbx)*b + c
+    case(5)
+       sigmoid_bx  = (1.0d0/(1.0d0 + exp(-beta*x)))
+       y  = x*sigmoid_bx
+       dy = beta*y + sigmoid_bx*(1.d0 - beta*y)
+    case(6)
+       softplus_x = log(1+exp(x))
+       y  = x*tanh(softplus_x)
+       omega = 4*(x+1) + 4*exp(2*x) + exp(3*x) + exp(x)*(4*x+6)
+       delta = 2*exp(x) + exp(2*x) + 2
+       dy = exp(x)*omega/delta**2
     case default
        y  = 0.0d0
        dy = 0.0d0
diff -r -u aenet/src/ext/sfbasis.f90 aenet_extend/src/ext/sfbasis.f90
--- aenet/src/ext/sfbasis.f90	2022-01-26 20:23:30.993784274 +0900
+++ aenet_extend/src/ext/sfbasis.f90	2022-01-26 20:26:15.081418195 +0900
@@ -26,6 +26,9 @@
 
 module sfbasis
 
+  use, intrinsic :: iso_c_binding, only: c_double, c_int, c_char, c_bool, &
+                                         c_ptr, c_f_pointer, c_null_char
+
   use io, only: io_unit
 
   use chebyshev, only: chebyshev_polynomial, &
@@ -73,6 +76,14 @@
   double precision, parameter, private :: PI_INV = 1.0d0/PI
   double precision, parameter, private :: PI2    = 2.0d0*PI
   double precision, parameter, private :: EPS    = 1.0d-12
+  
+  integer                              :: switch_sfb = 3
+  integer                              :: kfc_r = 0
+  integer                              :: kfc_a = 0
+  double precision                     :: r_h = 1.5d0
+  double precision                     :: a_h = 1.5d0
+  
+  integer(kind=c_int), bind(C, name='aenet_sfb_ver'), public :: aenet_sfb_ver = 3_c_int
 
 contains
 
@@ -146,6 +157,37 @@
        s = s + 1
     end do
 
+    select case(aenet_sfb_ver)
+    case(-1)
+       switch_sfb = -1
+       kfc_r  = 0
+       kfc_a  = 0
+    case(0)
+       switch_sfb = 0
+       kfc_r  = 0
+       kfc_a  = 0
+    case(1)
+       switch_sfb = 1
+       kfc_r  = 0
+       kfc_a  = 0
+    case(2)
+       switch_sfb = 1
+       kfc_r = 1
+       kfc_a = 1
+       r_h = 3.d0
+       a_h = 5.d0
+    case(3)
+       switch_sfb = 1
+       kfc_r = 1
+       kfc_a = 2
+       r_h = 3.d0
+       a_h = 1.25d0
+    case default
+       switch_sfb = 0
+       kfc_r  = 0
+       kfc_a  = 0
+    end select
+    
     sfb%initialized = .true.
 
   end function new_SFBasis
@@ -716,37 +758,59 @@
   !====================================================================!
 
 
-  function sfb_fc(Rij, Rc) result(fc)
+  function sfb_fc(Rij, Rc, kfc, h) result(fc)
 
     implicit none
 
-    double precision, intent(in) :: Rij, Rc
+    double precision, intent(in) :: Rij, Rc, h
+    integer,intent(in)           :: kfc
     double precision             :: fc
+    
+    double precision :: x
 
     if (Rij >= Rc) then
        fc  = 0.0d0
     else
-       fc  =  0.5d0*(cos(PI/Rc*Rij) + 1.0d0)
+       select case (kfc)
+       case(0)
+          fc  =  0.5d0*(cos(PI/Rc*Rij) + 1.0d0)
+       case(1)
+          fc  = 1.d0 + h*(Rij/Rc)**(h+1) - (h+1)*(Rij/Rc)**(h)
+       case(2)
+          x  = (Rij - Rc)/h
+          fc  = x**2/(1+x**2)
+       end select
     end if
 
   end function sfb_fc
 
   !--------------------------------------------------------------------!
 
-  function sfb_fc_d1(Rij, Rc) result(dfc)
+  function sfb_fc_d1(Rij, Rc, kfc, h) result(dfc)
 
     implicit none
 
-    double precision, intent(in) :: Rij, Rc
+    double precision, intent(in) :: Rij, Rc, h
+    integer,intent(in)           :: kfc
     double precision             :: dfc
-
+    
+    double precision :: x
     double precision :: a
 
     if (Rij >= Rc) then
        dfc = 0.0d0
     else
-       a = PI/Rc
-       dfc = -0.5d0*a*sin(a*Rij)
+       select case (kfc)
+       case(0)
+          a = PI/Rc
+          dfc = -0.5d0*a*sin(a*Rij)
+       case(1)
+          dfc = (h*(h+1)*(Rij/Rc)**(h) - (h+1)*h*(Rij/Rc)**(h-1))/Rc
+       case(2)
+          x  = (Rij - Rc)/h
+          dfc = 2*x/(1+x**2)**2/h
+       end select
+       
     end if
 
   end function sfb_fc_d1
@@ -776,13 +840,13 @@
 
     call sfb_assert_init(sfb)
 
-    w_ij = sfb_fc(d_ij, sfb%r_Rc)
+    w_ij = sfb_fc(d_ij, sfb%r_Rc,kfc_r,r_h)
     f = chebyshev_polynomial(d_ij, 0.0d0, sfb%r_Rc, sfb%r_order)
 
     values(1:sfb%r_N) = w_ij*f(1:sfb%r_N)
 
     if (present(deriv_i) .and. present(deriv_j)) then
-       dw_ij = sfb_fc_d1(d_ij, sfb%r_Rc)
+       dw_ij = sfb_fc_d1(d_ij, sfb%r_Rc, kfc_r, r_h)          
        df = chebyshev_polynomial_d1(d_ij, 0.0d0, sfb%r_Rc, sfb%r_order)
        forall (i=1:sfb%r_N)
           deriv_i(:,i) = -R_ij/d_ij*(dw_ij*f(i) + w_ij*df(i))
@@ -816,20 +880,36 @@
     double precision, dimension(3)       :: di_w_ijk, dj_w_ijk, dk_w_ijk
     integer                              :: i
 
-    call sfb_assert_init(sfb)
+    double precision                     :: h_cos
 
-    fc_j = sfb_fc(d_ij, sfb%a_Rc)
-    fc_k = sfb_fc(d_ik, sfb%a_Rc)
+    call sfb_assert_init(sfb)
+    
+    fc_j = sfb_fc(d_ij, sfb%a_Rc, kfc_a, a_h)
+    fc_k = sfb_fc(d_ik, sfb%a_Rc, kfc_a, a_h)
     w_ijk = fc_j*fc_k
-
-    f = chebyshev_polynomial(cos_ijk, -1.0d0, 1.0d0, sfb%a_order)
-
+    select case(switch_sfb)
+    case(-1)
+       f = chebyshev_polynomial(cos_ijk,  0.0d0, PI, sfb%a_order)
+    case(0)
+       f = chebyshev_polynomial(cos_ijk, -1.0d0, 1.0d0, sfb%a_order)
+    case(1)
+       h_cos = 0.5d0*(cos_ijk+1.d0)
+       f = chebyshev_polynomial(h_cos, -1.d0, 1.d0, sfb%a_order)
+    end select
+    
     values(1:sfb%a_N) = w_ijk*f
 
     if (present(deriv_i) .and. present(deriv_j) .and. present(deriv_k)) then
-       dfc_j = sfb_fc_d1(d_ij, sfb%a_Rc)
-       dfc_k = sfb_fc_d1(d_ik, sfb%a_Rc)
-       df = chebyshev_polynomial_d1(cos_ijk, -1.0d0, 1.0d0, sfb%a_order)
+       dfc_j = sfb_fc_d1(d_ij, sfb%a_Rc, kfc_a, a_h)
+       dfc_k = sfb_fc_d1(d_ik, sfb%a_Rc, kfc_a, a_h)
+       select case(switch_sfb)
+       case(-1)
+          df = chebyshev_polynomial_d1(cos_ijk,  0.0d0, PI, sfb%a_order)
+       case(0)
+          df = chebyshev_polynomial_d1(cos_ijk, -1.0d0, 1.0d0, sfb%a_order)
+       case(1)
+          df = 0.5d0*chebyshev_polynomial_d1(h_cos, -1.0d0, 1.d0, sfb%a_order)
+       end select
        id_ij2 = 1.0d0/(d_ij*d_ij)
        id_ik2 = 1.0d0/(d_ik*d_ik)
        id_ij_ik = 1.0d0/(d_ij*d_ik)
diff -r -u aenet/src/makefiles/Makefile.gfortran_mkl_serial aenet_extend/src/makefiles/Makefile.gfortran_mkl_serial
--- aenet/src/makefiles/Makefile.gfortran_mkl_serial	2022-01-26 20:23:30.994784278 +0900
+++ aenet_extend/src/makefiles/Makefile.gfortran_mkl_serial	2022-01-26 20:38:22.230227393 +0900
@@ -1,6 +1,6 @@
 #-*- mode: makefile -*-
 #-----------------------------------------------------------------------
-#                    GNU Fortran Compiler + MPI
+#                   GNU Fortran Compiler + MKL (serial)
 #-----------------------------------------------------------------------
 #+ This file is part of the AENET package.
 #+
@@ -24,6 +24,14 @@
 #-----------------------------------------------------------------------
 # 2015-05-26 Alexander Urban (AU) and Nongnuch Artrith (NA)
 #-----------------------------------------------------------------------
+MKLROOT  =/opt/intel/oneapi/mkl/latest
+MY_SYSLIB  = -lgfortran \
+             -Wl,--start-group \
+             ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a \
+             ${MKLROOT}/lib/intel64/libmkl_sequential.a \
+             ${MKLROOT}/lib/intel64/libmkl_core.a \
+             -Wl,--end-group \
+             -lpthread -lm -ldl
 
 SUFFIX   = gfortran_mkl_serial
 
@@ -47,6 +55,6 @@
 LIBLIB   = -lgfortran
 
 AR       = ar
-ARFLAGS  = -crusv
+ARFLAGS  = -rc
 
 include ./Makefile.inc
diff -r -u aenet/src/makefiles/Makefile.gfortran_serial aenet_extend/src/makefiles/Makefile.gfortran_serial
--- aenet/src/makefiles/Makefile.gfortran_serial	2022-01-26 20:23:30.994784278 +0900
+++ aenet_extend/src/makefiles/Makefile.gfortran_serial	2022-01-26 20:00:16.040395140 +0900
@@ -25,12 +25,14 @@
 # 2015-05-26 Alexander Urban (AU) and Nongnuch Artrith (NA)
 #-----------------------------------------------------------------------
 
+MY_SYSLIB   = -lgfortran
+
 SUFFIX   = gfortran_serial
 
 FC       = gfortran -c
 LD       = gfortran
 DEBUG    =
-FCFLAGS  = -O3 -pedantic -fexternal-blas $(DEBUG)
+FCFLAGS  = -O3 -pedantic $(DEBUG)
 LDFLAGS  = -static-libgfortran $(DEBUG)
 NUMLIB   = -llapack -lblas
 
@@ -43,6 +45,6 @@
 LIBLIB   = -lgfortran
 
 AR       = ar
-ARFLAGS  = -crUusv
+ARFLAGS  = -rc
 
 include ./Makefile.inc
diff -r -u aenet/src/makefiles/Makefile.ifort_serial aenet_extend/src/makefiles/Makefile.ifort_serial
--- aenet/src/makefiles/Makefile.ifort_serial	2022-01-26 20:23:30.994784278 +0900
+++ aenet_extend/src/makefiles/Makefile.ifort_serial	2022-01-26 20:00:16.041395144 +0900
@@ -25,11 +25,13 @@
 # 2015-05-26 Alexander Urban (AU) and Nongnuch Artrith (NA)
 #-----------------------------------------------------------------------
 
+MY_SYSLIB = -lifcore
+
 SUFFIX   = ifort_serial
 
 FC       = ifort -c
 LD       = ifort
-DEBUG    = -g -warn all -check bounds
+DEBUG    = 
 FCFLAGS  = -O2 $(DEBUG)
 LDFLAGS  = -static-intel $(DEBUG)
 NUMLIB   = -mkl
@@ -43,6 +45,6 @@
 LIBLIB   = -lgfortran
 
 AR       = ar
-ARFLAGS  = -crusv
+ARFLAGS  = -rc
 
 include ./Makefile.inc
